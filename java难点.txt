1 泛型
为什么使用泛型
规定参数类型，使代码有更好的安全性和可读性。编写的代码可以被不同类型的对象所重用。
泛型提供类型参数用来指示元素的类型。
java7以后可省略泛型类型。

2 泛型类的编写
通配符类型有助于写出更好的泛型类

类型变量用大写字母表示
T代表任意类型（U,S也可以）
K表示关键字
V表示值
E表示集合的元素类型

3 泛型方法
用<T>代替返回类型
可以定义在普通类，也可以定义在泛型类
调用泛型方法时需要放入具体类型，也可以省略，编译器可以自动判断

4 类型变量的限定
<T extends Comparable>extends表示T是Comparable的子类型
&分隔类型。，分隔类型变量
用类做限定，必须放在第一个，只能有一个限定类，可以有多个限定接口

5 虚拟机和泛型代码
虚拟机会删去类型参数后的泛型类型名，擦除类型变量，变为限定变量，无限定则是Object
称为原始类型、只有一个原始类型，所以代码不会膨胀
为了提高效率，把没有方法的标签限定类型放在后面，比如 T extends Comparable&Serializable

6 如何翻译泛型
调用泛型方法时，先擦除返回类型，再强制类型转换
桥方法看不懂。。

虚拟机中没有泛型，只有普通类和方法
所有类型参数由限定类型替换
桥方法被合成来保持多态
为保持类型安全，必要时插入强制类型转换

类型擦除会导致一些问题，下面要注意
1 不能用基本类型实例化类型参数
2 运行时类型查询只适合原始类型
3 不能创建参数化类型的数组，可以用ArrayList<Pair<Strinng>>

