Javascript闭包
解答：链式作用域，子对象可以一级一级寻找父对象的变量。		
	  父对象的变量对子对象可见。
	  闭包：外部读取不了内部函数的变量，只要在内部函数里再定义一个内部函数，
	  返回它，就可以实现内部函数的变量被外部读取。闭包连接了函数外部和函数内部
	  闭包还有一个作用，让变量留在内存中。a函数包含b，返回b。b赋值给c变量。
	  c变量是一个外部变量，导致b一直在内存中，a是b的依赖函数，也在内存中。所以a,b都在内存中，不会被回收。
	  注意：闭包会导致内存消耗大，不能滥用。退出函数前，删除不使用的局部变量、
	  闭包会改变父函数的内部值，，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），
	  把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。

	  
this的含义
解答:this永远指向其所在函数的所有者，如果没有所有者，则指向window，strict下指向undefined。
只要不是o.func1()引用的，fun1中的tihs指向window或者undefind（strict下）.
可以在在fun1中第一行写下var that = this，再使用that。也可以使用call或者apply。
oo.test3.call(window,2,3,4);//this指向window，输出为109
oo.test3.apply(window,[2,3,4]);//同上，使用apply进行元素罗列时需要使用中括号[]将所有参数包裹起来
oo.test3.apply(window,arr);//同上，使用apply对于一个数组的访问很简单，使用数组名称即可
fun1中的函数（闭包）中的this也是指向window或者underfind（strict）。

JSONP
解答：Web页面上调用js文件时则不受是否跨域的影响（不仅如此，凡是拥有"src"这个属性的标签都拥有跨域的能力，比如<script>、<img>、<iframe>）;
所以可以在远程服务器上把数据包裹成js文件传过来。JSONP协议的一个要点就是允许用户传递一个callback参数给服务端，
然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端写一个同样名字的函数，就可以随意自动处理返回数据了。
ajax和jsonp其实本质上是不同的东西。ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<script>标签来调用服务器提供的js脚本。
