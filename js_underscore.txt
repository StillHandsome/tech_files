underscore则提供了一套完善的函数式编程的接口，让我们更方便地在JavaScript中实现函数式编程。
underscore会把自身绑定到唯一的全局变量_上，这也是为啥它的名字叫underscore的原因。
用underscore实现map()操作如下：
'use strict';
_.map([1, 2, 3], (x) => x * x); // [1, 4, 9]
underscore的map()还可以作用于Object：
underscore为集合类对象提供了一致的接口。集合类是指Array和Object，暂不支持Map和Set。
和Array的map()与filter()类似，但是underscore的map()和filter()可以作用于Object。
当作用于Object时，传入的函数为function (value, key)，第一个参数接收value，第二个参数接收key。
_.mapObject可以让返回值为对象。
当集合的所有元素都满足条件时，_.every()函数返回true，当集合的至少一个元素满足条件时，_.some()函数返回true
max / min：这两个函数直接返回集合中最大和最小的数。
'use strict';
var arr = [3, 5, 7, 9];
_.max(arr); // 9
_.min(arr); // 3
// 空集合会返回-Infinity和Infinity，所以要先判断集合不为空：
_.max([])
-Infinity
_.min([])
Infinity
如果集合是Object，max()和min()只作用于value，忽略掉key
groupBy

groupBy()把集合的元素按照key归类，key由传入的函数返回：

'use strict';

var scores = [20, 81, 75, 40, 91, 59, 77, 66, 72, 88, 99];
var groups = _.groupBy(scores, function (x) {
    if (x < 60) {
        return 'C';
    } else if (x < 80) {
        return 'B';
    } else {
        return 'A';
    }
});
// 结果:
// {
//   A: [81, 91, 88, 99],
//   B: [75, 77, 66, 72],
//   C: [20, 40, 59]
// }
shuffle / sample

shuffle()用洗牌算法随机打乱一个集合：

'use strict';
// 注意每次结果都不一样：
_.shuffle([1, 2, 3, 4, 5, 6]); // [3, 5, 4, 6, 2, 1]
sample()则是随机选择一个或多个元素：
underscore为Array提供了许多工具类方法，可以更方便快捷地操作Array
first / last
顾名思义，这两个函数分别取第一个和最后一个元素
flatten()接收一个Array，无论这个Array里面嵌套了多少个Array，flatten()最后都把它们变成一个一维数组
zip()把两个或多个数组的所有元素按索引对齐，然后按索引合并成新数组。
例如，你有一个Array保存了名字，另一个Array保存了分数，现在，要把名字和分数给对上
unzip()则是反过来：
'use strict';
var namesAndScores = [['Adam', 85], ['Lisa', 92], ['Bart', 59]];
_.unzip(namesAndScores);
// [['Adam', 'Lisa', 'Bart'], [85, 92, 59]]
object

object()函数把名字和分数直接对应成Object：
'use strict';
var names = ['Adam', 'Lisa', 'Bart'];
var scores = [85, 92, 59];
_.object(names, scores);
// {Adam: 85, Lisa: 92, Bart: 59}
注意_.object()是一个函数，不是JavaScript的Object
range()让你快速生成一个序列，不再需要用for循环实现了：

'use strict';

// 从0开始小于10:
_.range(10); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

// 从0开始小于30，步长5:
_.range(0, 30, 5); // [0, 5, 10, 15, 20, 25]

// 从0开始大于-10，步长-1:
_.range(0, -10, -1); // [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
bind()可以帮我们把console对象直接绑定在log()的this指针上，以后调用log()就可以直接正常调用
'use strict';
var log = _.bind(console.log, console);
log('Hello, world!');// 输出Hello, world!
partial()就是为一个函数创建偏函数。偏函数是什么东东？看例子：

假设我们要计算xy，这时只需要调用Math.pow(x, y)就可以了。

假设我们经常计算2y，每次都写Math.pow(2, y)就比较麻烦，如果创建一个新的函数能直接这样写pow2N(y)就好了，
这个新函数pow2N(y)就是根据Math.pow(x, y)创建出来的偏函数，它固定住了原函数的第一个参数（始终为2）
var pow2N = _.partial(Math.pow, 2);
pow2N(3); // 8
pow2N(5); // 32
如果我们不想固定第一个参数，想固定第二个参数怎么办？比如，希望创建一个偏函数cube(x)，计算x3，可以用_作占位符，固定住第二个参数：

'use strict';

var cube = _.partial(Math.pow, _, 3);
cube(3); // 27
创建偏函数的目的是将原函数的某些参数固定住，可以降低新函数调用的难度

用memoize()就可以自动缓存函数计算的结果
var factorial = _.memoize(function(n) {
    console.log('start calculate ' + n + '!...');
    var s = 1, i = n;
    while (i > 1) {
        s = s * i;
        i --;
    }
    console.log(n + '! = ' + s);
    return s;
});

// 第一次调用:
factorial(10); // 3628800
// 注意控制台输出:
// start calculate 10!...
// 10! = 3628800

// 第二次调用:
factorial(10); // 3628800
// 控制台没有输出
当你计算factorial(9)的时候，仍然会重新计算。

可以对factorial()进行改进，让其递归调用：

'use strict';

var factorial = _.memoize(function(n) {
    console.log('start calculate ' + n + '!...');
    if (n < 2) {
        return 1;
    }
    return n * factorial(n - 1);
});

factorial(10); // 3628800
// 输出结果说明factorial(1)~factorial(10)都已经缓存了:
// start calculate 10!...
// start calculate 9!...
// start calculate 8!...
// start calculate 7!...
// start calculate 6!...
// start calculate 5!...
// start calculate 4!...
// start calculate 3!...
// start calculate 2!...
// start calculate 1!...

factorial(9); // 362880
// console无输出
once

顾名思义，once()保证某个函数执行且仅执行一次。如果你有一个方法叫register()，
用户在页面上点两个按钮的任何一个都可以执行的话，就可以用once()保证函数仅调用一次，无论用户点击多少次
delay()可以让一个函数延迟执行，效果和setTimeout()是一样的，但是代码明显简单了：

'use strict';

// 2秒后调用alert():
_.delay(alert, 2000);
如果要延迟调用的函数有参数，把参数也传进去：

'use strict';

var log = _.bind(console.log, console);
_.delay(log, 2000, 'Hello,', 'world!');
// 2秒后打印'Hello, world!':
keys / allKeys

keys()可以非常方便地返回一个object自身所有的key，但不包含从原型链继承下来的
allKeys()除了object自身的key，还包含从原型链继承下来的
和keys()类似，values()返回object自身但不包含原型链继承的所有值
没有allValues()
mapObject()就是针对object的map版本：

'use strict';

var obj = { a: 1, b: 2, c: 3 };
// 注意传入的函数签名，value在前，key在后:
_.mapObject(obj, (v, k) => 100 + v); // { a: 101, b: 102, c: 103 }
invert()把object的每个key-value来个交换，key变成value，value变成key
extend()把多个object的key-value合并到第一个object并返回：

'use strict';

var a = {name: 'Bob', age: 20};
_.extend(a, {age: 15}, {age: 88, city: 'Beijing'}); // {name: 'Bob', age: 88, city: 'Beijing'}
// 变量a的内容也改变了：
a; // {name: 'Bob', age: 88, city: 'Beijing'}
注意：如果有相同的key，后面的object的value将覆盖前面的object的value。

extendOwn()和extend()类似，但获取属性时忽略从原型链继承下来的属性
如果我们要复制一个object对象，就可以用clone()方法，它会把原有对象的所有属性都复制到新的对象中
注意，clone()是“浅复制”。所谓“浅复制”就是说，两个对象相同的key所引用的value其实是同一对象
isEqual()对两个object进行深度比较，如果内容完全相同，则返回true
'use strict';

var o1 = { name: 'Bob', skills: { Java: 90, JavaScript: 99 }};
var o2 = { name: 'Bob', skills: { JavaScript: 99, Java: 90 }};

o1 === o2; // false  需要完全一样？
_.isEqual(o1, o2); // true  
underscore提供了把对象包装成能进行链式调用的方法，就是chain()函数：

_.chain([1, 4, 9, 16, 25])
 .map(Math.sqrt)
 .filter(x => x % 2 === 1)
 .value();
// [1, 3, 5]
因为每一步返回的都是包装对象，所以最后一步的结果需要调用value()获得最终结果。

问题：js a文件引用另一个js b文件
1，可以在引用js a的html文件上加上<script src='b.js'></script>
<script src='a.js'></script>
2,js a 中第一行加上document.write("<script src='b.js'></script>");，但此时必须在 a中写需要b.js的函数x。
在html中引用a中的函数x，才没问题。否则会识别不了b中变量。


